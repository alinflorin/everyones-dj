package edp.gui;


import edp.libraries.thirdparty.gui.FileDrop;
import edp.network.Server;
import edp.player.EDPlayer;
import edp.libraries.own.settings.SettingsManager;
import edp.player.Song;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.concurrent.TimeUnit;
import javax.swing.BorderFactory;
import javax.swing.DropMode;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javazoom.jlgui.basicplayer.BasicPlayer;
import ro.qoffice.everyonesdj.network.AndroidPlaylist;
import ro.qoffice.everyonesdj.network.DataSet;

public class PlayerGUI extends javax.swing.JFrame {
    private final EDPlayer edp;
    private FileDrop fd;
    private DragAndDropListener droplistener;
    private Server s;

    public PlayerGUI() {
        initComponents();
        SettingsManager sm = SettingsManager.getSettingsManager();
        if (sm.getString("banner") != null) {
            banner.setText(sm.getString("banner"));
        }
        System.out.println(sm.getString("banner"));
        edp = new EDPlayer(this);
        refreshList();
        droplistener = new DragAndDropListener(this,edp.playlist);
        fd = new FileDrop(this, droplistener);
        s = new Server(edp);
        s.start();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logo = new JLabel();
        tableWrapper = new JScrollPane();
        playlist = new JTable();
        panelButtons = new JPanel();
        btnWifi = new JButton();
        btnPlay = new JButton();
        btnStop = new JButton();
        volume = new JSlider();
        btnAddFiles = new JButton();
        btnAddFolder = new JButton();
        currentTime = new JLabel();
        search = new JTextField();
        clear = new JButton();
        lblSong = new JLabel();
        jLabel1 = new JLabel();
        banner = new JTextField();
        setbanner = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Everyone's DJ Player");

        logo.setHorizontalAlignment(SwingConstants.CENTER);
        logo.setIcon(new ImageIcon(getClass().getResource("/edp/gui/images/logo.png"))); // NOI18N

        playlist.setAutoCreateRowSorter(true);
        playlist.setFont(new Font("Arial", 0, 14)); // NOI18N
        playlist.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Artist", "Title", "Duration", "Votes"
            }
        ) {
            Class[] types = new Class [] {
                Integer.class, String.class, String.class, String.class, Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        playlist.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        playlist.setCursor(new Cursor(Cursor.HAND_CURSOR));
        playlist.setDragEnabled(true);
        playlist.setDropMode(DropMode.INSERT_ROWS);
        playlist.setRowSorter(null);
        playlist.setSelectionBackground(new Color(153, 153, 153));
        playlist.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        playlist.setShowHorizontalLines(false);
        playlist.setSurrendersFocusOnKeystroke(true);
        playlist.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                playlistMouseClicked(evt);
            }
        });
        playlist.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                playlistKeyPressed(evt);
            }
        });
        tableWrapper.setViewportView(playlist);
        playlist.getColumnModel().getColumn(0).setPreferredWidth(50);
        playlist.getColumnModel().getColumn(1).setPreferredWidth(300);
        playlist.getColumnModel().getColumn(2).setPreferredWidth(300);
        playlist.getColumnModel().getColumn(3).setPreferredWidth(50);
        playlist.getColumnModel().getColumn(4).setPreferredWidth(100);

        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.LEFT);
        playlist.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
        playlist.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        playlist.getInputMap(JTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "selectNextColumnCell");

        panelButtons.setLayout(new GridLayout(1, 0));

        btnWifi.setIcon(new ImageIcon(getClass().getResource("/edp/gui/images/wifi_on.png"))); // NOI18N
        btnWifi.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnWifi.setBorderPainted(false);
        btnWifi.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnWifi.setFocusPainted(false);
        btnWifi.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                btnWifiMouseClicked(evt);
            }
        });
        panelButtons.add(btnWifi);
        btnWifi.setOpaque(false);
        btnWifi.setContentAreaFilled(false);

        btnPlay.setIcon(new ImageIcon(getClass().getResource("/edp/gui/images/play.png"))); // NOI18N
        btnPlay.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnPlay.setBorderPainted(false);
        btnPlay.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnPlay.setFocusPainted(false);
        btnPlay.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                btnPlayMouseClicked(evt);
            }
        });
        panelButtons.add(btnPlay);
        btnPlay.setOpaque(false);
        btnPlay.setContentAreaFilled(false);

        btnStop.setIcon(new ImageIcon(getClass().getResource("/edp/gui/images/stop.png"))); // NOI18N
        btnStop.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnStop.setBorderPainted(false);
        btnStop.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnStop.setFocusPainted(false);
        btnStop.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                btnStopMouseClicked(evt);
            }
        });
        panelButtons.add(btnStop);
        btnStop.setOpaque(false);
        btnStop.setContentAreaFilled(false);

        volume.setFont(new Font("Arial", 0, 14)); // NOI18N
        volume.setValue(100);
        volume.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                volumeStateChanged(evt);
            }
        });
        panelButtons.add(volume);

        btnAddFiles.setIcon(new ImageIcon(getClass().getResource("/edp/gui/images/plusfile.png"))); // NOI18N
        btnAddFiles.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnAddFiles.setBorderPainted(false);
        btnAddFiles.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnAddFiles.setFocusPainted(false);
        btnAddFiles.setMaximumSize(new Dimension(32, 32));
        btnAddFiles.setMinimumSize(new Dimension(32, 32));
        btnAddFiles.setPreferredSize(new Dimension(32, 32));
        btnAddFiles.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                btnAddFilesMouseClicked(evt);
            }
        });

        btnAddFolder.setIcon(new ImageIcon(getClass().getResource("/edp/gui/images/plusfolder.png"))); // NOI18N
        btnAddFolder.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnAddFolder.setBorderPainted(false);
        btnAddFolder.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnAddFolder.setFocusPainted(false);
        btnAddFolder.setMaximumSize(new Dimension(32, 32));
        btnAddFolder.setMinimumSize(new Dimension(32, 32));
        btnAddFolder.setPreferredSize(new Dimension(32, 32));
        btnAddFolder.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                btnAddFolderMouseClicked(evt);
            }
        });

        currentTime.setFont(new Font("Arial", 1, 18)); // NOI18N
        currentTime.setText("00:00");

        search.setText("Search here");
        search.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent evt) {
                searchFocusGained(evt);
            }
            public void focusLost(FocusEvent evt) {
                searchFocusLost(evt);
            }
        });
        search.addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });

        clear.setText("Clear");
        clear.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                clearMouseClicked(evt);
            }
        });

        jLabel1.setText("Banner image link:");

        setbanner.setText("Browse");
        setbanner.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                setbannerMouseClicked(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(logo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(tableWrapper)
                    .addComponent(panelButtons, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSong, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(45, 45, 45)
                        .addComponent(currentTime))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddFiles, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddFolder, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search, GroupLayout.PREFERRED_SIZE, 163, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clear)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(banner)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setbanner)))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(logo)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableWrapper, GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(search)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAddFiles, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddFolder, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(clear, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(lblSong, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentTime))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(banner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(setbanner))
                .addGap(18, 18, 18)
                .addComponent(panelButtons, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        btnAddFiles.setOpaque(false);
        btnAddFiles.setContentAreaFilled(false);
        btnAddFolder.setOpaque(false);
        btnAddFolder.setContentAreaFilled(false);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPlayMouseClicked(MouseEvent evt) {//GEN-FIRST:event_btnPlayMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            switch (edp.getStatus()) {
                case BasicPlayer.PAUSED:
                    edp.resume();
                    break;
                case BasicPlayer.STOPPED:
                    if (edp.getCurrent() != null) {
                        edp.play();
                    } 
                case BasicPlayer.PLAYING:
                    edp.pause();
                    break;
            }
        }
    }//GEN-LAST:event_btnPlayMouseClicked

    private void btnAddFilesMouseClicked(MouseEvent evt) {//GEN-FIRST:event_btnAddFilesMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            final JFileChooser jfc = new JFileChooser(".");
            jfc.setDialogTitle("Choose MP3 files to add.");
            jfc.setMultiSelectionEnabled(true);
            jfc.setDialogType(JFileChooser.OPEN_DIALOG);
            jfc.setFileFilter(new FileNameExtensionFilter("MP3 files", "mp3"));
            int response = jfc.showOpenDialog(this);
            if (response == JFileChooser.APPROVE_OPTION) {
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        File[] files = jfc.getSelectedFiles();
                        Song[] songs = new Song[files.length];
                        int i = 0;
                        for (File f:files) {
                            songs[i++] = new Song(f);
                        }
                        edp.playlist.addSongs(songs);
                        refreshList();
                        sendPlaylist();
                    }
                }).start();
            }
        }
    }//GEN-LAST:event_btnAddFilesMouseClicked

    private void btnAddFolderMouseClicked(MouseEvent evt) {//GEN-FIRST:event_btnAddFolderMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            final JFileChooser jfc = new JFileChooser(".");
            jfc.setDialogTitle("Choose a folder to add.");
            jfc.setDialogType(JFileChooser.OPEN_DIALOG);
            jfc.setMultiSelectionEnabled(false);
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int response = jfc.showOpenDialog(this);
            if (response == JFileChooser.APPROVE_OPTION) {
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        File dir = jfc.getSelectedFile();
                        if (dir.isDirectory() && dir.canRead()) {
                            edp.playlist.scanDirectory(dir);
                            refreshList();
                            sendPlaylist();
                        }
                    }
                }).start();
            }
        }
    }//GEN-LAST:event_btnAddFolderMouseClicked

    private void playlistMouseClicked(MouseEvent evt) {//GEN-FIRST:event_playlistMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            JTable table = (JTable)evt.getSource();
            Point p = evt.getPoint();
            int row = table.rowAtPoint(p);
            Song s = edp.playlist.getAt(row);
            edp.setSong(s);
            edp.play();
            refreshList();
        }
    }//GEN-LAST:event_playlistMouseClicked

    private void playlistKeyPressed(KeyEvent evt) {//GEN-FIRST:event_playlistKeyPressed
        int[] rows = playlist.getSelectedRows();
        if (rows.length > 0) {
            Song[] songs = new Song[rows.length];
            for(int i=0;i<rows.length;i++) {
                songs[i] = edp.playlist.getAt(rows[i]);
            }
            switch (evt.getKeyCode()) {
                case KeyEvent.VK_ENTER:
                    if (songs.length > 0) {
                        edp.setSong(songs[0]);
                        edp.play();
                    }
                    break;
                case KeyEvent.VK_DELETE:
                    if (songs.length > 0) {
                        edp.playlist.removeSongs(songs);
                        refreshList();
                        sendPlaylist();
                    }
                    break;
            }
        }
    }//GEN-LAST:event_playlistKeyPressed

    private void btnStopMouseClicked(MouseEvent evt) {//GEN-FIRST:event_btnStopMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            edp.stop();
        }
    }//GEN-LAST:event_btnStopMouseClicked

    private void volumeStateChanged(ChangeEvent evt) {//GEN-FIRST:event_volumeStateChanged
        edp.setVolume((volume.getValue() * 1.0f)/100f);
    }//GEN-LAST:event_volumeStateChanged

    private void searchFocusGained(FocusEvent evt) {//GEN-FIRST:event_searchFocusGained
        if (search.getText().equals("Search here")) {
            search.setText("");
        }
    }//GEN-LAST:event_searchFocusGained

    private void searchFocusLost(FocusEvent evt) {//GEN-FIRST:event_searchFocusLost
        if (search.getText().equals("")) {
            search.setText("Search here");
        }
    }//GEN-LAST:event_searchFocusLost

    private void clearMouseClicked(MouseEvent evt) {//GEN-FIRST:event_clearMouseClicked
        search.setText("");
        edp.setSearch("");
        refreshList();
    }//GEN-LAST:event_clearMouseClicked

    private void searchKeyReleased(KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        edp.setSearch(search.getText());
        refreshList();
    }//GEN-LAST:event_searchKeyReleased

    private void btnWifiMouseClicked(MouseEvent evt) {//GEN-FIRST:event_btnWifiMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            if (s.isOn()) {
                s.stopServer();
                btnWifi.setIcon(new ImageIcon(getClass().getResource("/edp/gui/images/wifi_off.png")));
            } else {
                s = new Server(edp);
                s.start();
                btnWifi.setIcon(new ImageIcon(getClass().getResource("/edp/gui/images/wifi_on.png")));
            }
        }
    }//GEN-LAST:event_btnWifiMouseClicked

    private void setbannerMouseClicked(MouseEvent evt) {//GEN-FIRST:event_setbannerMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            final JFileChooser jfc = new JFileChooser(".");
            jfc.setDialogTitle("Choose a jpg file");
            jfc.setMultiSelectionEnabled(false);
            jfc.setDialogType(JFileChooser.OPEN_DIALOG);
            jfc.setFileFilter(new FileNameExtensionFilter("JPG files", "jpg"));
            int response = jfc.showOpenDialog(this);
            if (response == JFileChooser.APPROVE_OPTION) {
                File jpg = jfc.getSelectedFile();
                if (jpg.exists()) {
                    SettingsManager.getSettingsManager().putString("banner", jpg.getAbsolutePath());
                    banner.setText(jpg.getAbsolutePath());
                }
            }
        }
    }//GEN-LAST:event_setbannerMouseClicked

    public void refreshList() {
        String searched = edp.getSearch().toLowerCase();
        DefaultTableModel dtm = (DefaultTableModel) playlist.getModel();
        dtm.setRowCount(0);
        int nr = -1;
        for (int i=0;i<edp.playlist.getSize();i++) {
            Song s = edp.playlist.getAt(i);
            if (s != null) {
                long millis = s.getDuration();
                String x = String.format("%d:%d",TimeUnit.MILLISECONDS.toMinutes(millis),TimeUnit.MILLISECONDS.toSeconds(millis) -  TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis)));
                if (TimeUnit.MILLISECONDS.toSeconds(millis) -  TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis)) < 10) {
                    x = x.replace(":", ":0");
                }
                if (searched != null && searched.length() > 0) {
                    if (s.getArtist().toLowerCase().contains(searched) || s.getTitle().toLowerCase().contains(searched) || s.getFilename().toLowerCase().contains(searched)) {
                        dtm.insertRow(++nr, new Object[]{s.getPlaylistNo(),s.getArtist(),s.getTitle(),x,s.getVotes()});
                    }
                } else {
                    dtm.insertRow(++nr, new Object[]{s.getPlaylistNo(),s.getArtist(),s.getTitle(),x,s.getVotes()});
                }
            }
        }
        playlist.setModel(dtm);
    }

    public void sendPlaylist() {
        AndroidPlaylist ap = edp.exportForNetwork();
        s.getClients().stream().forEach((cl) -> {
            cl.send(new DataSet(null,"NEWPLAYLIST",ap));
        });
    }

    public void highlight(int i) {
        i--;
        playlist.setRowSelectionInterval(i, i);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextField banner;
    private JButton btnAddFiles;
    private JButton btnAddFolder;
    public JButton btnPlay;
    private JButton btnStop;
    public JButton btnWifi;
    private JButton clear;
    public JLabel currentTime;
    private JLabel jLabel1;
    public JLabel lblSong;
    private JLabel logo;
    private JPanel panelButtons;
    public JTable playlist;
    private JTextField search;
    private JButton setbanner;
    private JScrollPane tableWrapper;
    public JSlider volume;
    // End of variables declaration//GEN-END:variables
}
